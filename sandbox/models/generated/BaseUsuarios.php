<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Usuarios', 'doctrine');

/**
 * BaseUsuarios
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $user
 * @property string $password
 * @property integer $nivel
 * @property string $apenom
 * @property blob $activo
 * @property string $ultimoPassword
 * @property date $vencimiento
 * @property string $puesto
 * @property string $mail
 * @property string $passwordProvisoria
 * @property timestamp $fechaActualizacionPassword
 * @property integer $id
 * @property Doctrine_Collection $Clientesporusuarios
 * @property Doctrine_Collection $Ctacteturismo
 * @property Doctrine_Collection $Francosdiarios
 * @property Doctrine_Collection $Licenciaconductor
 * @property Doctrine_Collection $Mensajesinternos
 * @property Doctrine_Collection $Mensajesinternos_2
 * @property Doctrine_Collection $Ordenes
 * @property Doctrine_Collection $Usuariosxestructuras
 * @property Doctrine_Collection $Vacacionespersonal
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUsuarios extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('usuarios');
        $this->hasColumn('user', 'string', 10, array(
             'type' => 'string',
             'length' => 10,
             'fixed' => true,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('password', 'string', 16, array(
             'type' => 'string',
             'length' => 16,
             'fixed' => true,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('nivel', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('apenom', 'string', 31, array(
             'type' => 'string',
             'length' => 31,
             'fixed' => true,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('activo', 'blob', null, array(
             'type' => 'blob',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('ultimoPassword', 'string', 16, array(
             'type' => 'string',
             'length' => 16,
             'fixed' => true,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('vencimiento', 'date', null, array(
             'type' => 'date',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('puesto', 'string', 45, array(
             'type' => 'string',
             'length' => 45,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('mail', 'string', 155, array(
             'type' => 'string',
             'length' => 155,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('passwordProvisoria', 'string', 16, array(
             'type' => 'string',
             'length' => 16,
             'fixed' => true,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('fechaActualizacionPassword', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Clientesporusuarios', array(
             'local' => 'id',
             'foreign' => 'id_usuario'));

        $this->hasMany('Ctacteturismo', array(
             'local' => 'id',
             'foreign' => 'id_user'));

        $this->hasMany('Francosdiarios', array(
             'local' => 'id',
             'foreign' => 'id_user'));

        $this->hasMany('Licenciaconductor', array(
             'local' => 'id',
             'foreign' => 'id_usuario'));

        $this->hasMany('Mensajesinternos', array(
             'local' => 'id',
             'foreign' => 'id_emisor'));

        $this->hasMany('Mensajesinternos as Mensajesinternos_2', array(
             'local' => 'id',
             'foreign' => 'id_receptor'));

        $this->hasMany('Ordenes', array(
             'local' => 'id',
             'foreign' => 'id_user'));

        $this->hasMany('Usuariosxestructuras', array(
             'local' => 'id',
             'foreign' => 'id_usuario'));

        $this->hasMany('Vacacionespersonal', array(
             'local' => 'id',
             'foreign' => 'id_user'));
    }
}